import{_ as e,c as a,o,a2 as t}from"./chunks/framework.cT481euY.js";const m=JSON.parse('{"title":"Module: graphviz","description":"","frontmatter":{},"headers":[],"relativePath":"modules/graphviz.md","filePath":"modules/graphviz.md","lastUpdated":null}'),r={name:"modules/graphviz.md"},i=t('<h1 id="module-graphviz" tabindex="-1">Module: graphviz <a class="header-anchor" href="#module-graphviz" aria-label="Permalink to &quot;Module: graphviz&quot;">​</a></h1><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><ul><li><a href="/hpcc-js-wasm/classes/graphviz.Graphviz.html">Graphviz</a></li></ul><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><ul><li><a href="/hpcc-js-wasm/interfaces/graphviz.Image.html">Image</a></li><li><a href="/hpcc-js-wasm/interfaces/graphviz.File.html">File</a></li><li><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html">Options</a></li></ul><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><h3 id="format" tabindex="-1">Format <a class="header-anchor" href="#format" aria-label="Permalink to &quot;Format&quot;">​</a></h3><p>Ƭ <strong>Format</strong>: <code>&quot;svg&quot;</code> | <code>&quot;dot&quot;</code> | <code>&quot;json&quot;</code> | <code>&quot;dot_json&quot;</code> | <code>&quot;xdot_json&quot;</code> | <code>&quot;plain&quot;</code> | <code>&quot;plain-ext&quot;</code></p><p>Various graphic and data formats for end user, web, documents and other applications. See <a href="https://graphviz.gitlab.io/docs/outputs/" target="_blank" rel="noreferrer">Output Formats</a> for more information.</p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/8f763fc/src-ts/graphviz.ts#L7" target="_blank" rel="noreferrer">graphviz.ts:7</a></p><hr><h3 id="engine" tabindex="-1">Engine <a class="header-anchor" href="#engine" aria-label="Permalink to &quot;Engine&quot;">​</a></h3><p>Ƭ <strong>Engine</strong>: <code>&quot;circo&quot;</code> | <code>&quot;dot&quot;</code> | <code>&quot;fdp&quot;</code> | <code>&quot;sfdp&quot;</code> | <code>&quot;neato&quot;</code> | <code>&quot;osage&quot;</code> | <code>&quot;patchwork&quot;</code> | <code>&quot;twopi&quot;</code> | <code>&quot;nop&quot;</code> | <code>&quot;nop2&quot;</code></p><p>Various algorithms for projecting abstract graphs into a space for visualization. See <a href="https://graphviz.gitlab.io/docs/layouts/" target="_blank" rel="noreferrer">Layout Engines</a> for more details.</p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/8f763fc/src-ts/graphviz.ts#L12" target="_blank" rel="noreferrer">graphviz.ts:12</a></p>',17),s=[i];function c(n,d,h,l,u,p){return o(),a("div",null,s)}const q=e(r,[["render",c]]);export{m as __pageData,q as default};
